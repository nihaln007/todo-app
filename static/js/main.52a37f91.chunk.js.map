{"version":3,"sources":["components/Demo.js","App.js","serviceWorker.js","index.js"],"names":["Demo","handleChange","e","setState","input","target","value","storeItems","event","preventDefault","state","values","x","length","alert","deleteItems","key","allItems","splice","editedText","editedStore","addEditedText","currentItems","newText","deleteAll","localStorage","removeItem","saveAll","setItem","this","nihal","getItem","array","split","push","className","onSubmit","onChange","type","placeholder","map","data","i","trigger","onClick","editItems","position","style","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iOAIqBA,E,kDACnB,aAAe,IAAD,8BACZ,gBAgBFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,MAAOF,EAAEG,OAAOC,SAlBpB,EAoBdC,WAAa,SAACC,GACZA,EAAMC,iBAGN,IAJsB,IAEdL,EAAU,EAAKM,MAAfN,MACAO,EAAW,EAAKD,MAAhBC,OACCC,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IACjC,GAAIR,IAAUO,EAAOC,GAEnB,OADAE,MAAM,SACC,EAGG,KAAVV,GAAgBA,IAAUO,EAAOC,GACnC,EAAKT,SAAS,CAAEQ,OAAO,GAAD,mBAAM,EAAKD,MAAMC,QAAjB,CAAyBP,IAAQA,MAAO,KAE9DU,MAAM,oBAjCI,EAoCdC,YAAc,SAACC,GACb,IAAMC,EAAW,EAAKP,MAAMC,OAC5BM,EAASC,OAAOF,EAAK,GACrB,EAAKb,SAAS,CAAEQ,OAAQM,KAvCZ,EAyCdE,WAAa,SAACjB,GACZ,EAAKC,SAAS,CAAEiB,YAAalB,EAAEG,OAAOC,SA1C1B,EA4Cde,cAAgB,SAACL,GACf,IAAIM,EAAe,EAAKZ,MAAMC,OAC1BY,EAAU,EAAKb,MAAMU,YACzBE,EAAaJ,OAAOF,EAAK,EAAGO,GAC5B,EAAKpB,SAAS,CACZQ,OAAQW,KAjDE,EAoDdE,UAAY,WACV,EAAKrB,SAAS,CAAEQ,OAAQ,KACxBc,aAAaC,WAAW,UAtDZ,EAwDdC,QAAU,WAAO,IACPhB,EAAW,EAAKD,MAAhBC,OACRc,aAAaG,QAAQ,QAASjB,IAxD9B,EAAKD,MAAQ,CACXN,MAAO,GACPO,OAAQ,IAJE,E,iEAOQ,IACZA,EAAWkB,KAAKnB,MAAhBC,OACJmB,EAAQL,aAAaM,QAAQ,SACjC,GAAkC,OAA9BN,aAAaT,IAAI,SACnB,OAAO,EAEP,IAAIgB,EAAQF,EAAMG,MAAM,KACxBtB,EAAOuB,KAAP,MAAAvB,EAAM,YAASqB,M,+BA8CT,IAAD,OACP,OACE,yBAAKG,UAAU,aACb,0BAAMA,UAAU,gBAAgBC,SAAUP,KAAKtB,YAC7C,wCACA,2BACED,MAAOuB,KAAKnB,MAAMN,MAClBiC,SAAUR,KAAK5B,aACfqC,KAAK,OACLC,YAAY,oBAGhB,4BACGV,KAAKnB,MAAMC,OAAO6B,KAAI,SAACC,EAAMC,GAC5B,OACE,wBAAI1B,IAAK0B,GACND,EAED,kBAAC,IAAD,CACEE,QACE,uBACER,UAAU,cACVS,QAAS,WACP,EAAKC,UAAUH,MAIrBI,SAAS,gBAET,yBAAKX,UAAU,QAAQY,MAAO,EAAKrC,MAAMqC,OACvC,2BACEzC,MAAO,EAAKI,MAAMH,WAClB+B,KAAK,OACLD,SAAU,EAAKlB,aAEjB,4BACEyB,QAAS,WACP,EAAKvB,cAAcqB,KAFvB,SAUJ,uBACEP,UAAU,mBACVS,QAAS,WACP,EAAK7B,YAAY2B,WAO7B,4BAAQE,QAASf,KAAKF,SAAtB,YACA,4BAAQiB,QAASf,KAAKL,WAAtB,mB,GArH0BwB,aCGnBC,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.52a37f91.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Demo.css\";\r\nimport Popup from \"reactjs-popup\";\r\n\r\nexport default class Demo extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      input: \"\",\r\n      values: [],\r\n    };\r\n  }\r\n  componentWillMount() {\r\n    const { values } = this.state;\r\n    var nihal = localStorage.getItem(\"Nihal\");\r\n    if (localStorage.key(\"Nihal\") === null) {\r\n      return false;\r\n    } else {\r\n      var array = nihal.split(\",\");\r\n      values.push(...array);\r\n    }\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({ input: e.target.value });\r\n  };\r\n  storeItems = (event) => {\r\n    event.preventDefault();\r\n    const { input } = this.state;\r\n    const { values } = this.state;\r\n    for (var x = 0; x < values.length; x++) {\r\n      if (input === values[x]) {\r\n        alert(\"same\");\r\n        return false;\r\n      }\r\n    }\r\n    if (input !== \"\" && input !== values[x]) {\r\n      this.setState({ values: [...this.state.values, input], input: \"\" });\r\n    } else {\r\n      alert(\"Enter something\");\r\n    }\r\n  };\r\n  deleteItems = (key) => {\r\n    const allItems = this.state.values;\r\n    allItems.splice(key, 1);\r\n    this.setState({ values: allItems });\r\n  };\r\n  editedText = (e) => {\r\n    this.setState({ editedStore: e.target.value });\r\n  };\r\n  addEditedText = (key) => {\r\n    let currentItems = this.state.values;\r\n    let newText = this.state.editedStore;\r\n    currentItems.splice(key, 1, newText);\r\n    this.setState({\r\n      values: currentItems,\r\n    });\r\n  };\r\n  deleteAll = () => {\r\n    this.setState({ values: [] });\r\n    localStorage.removeItem(\"Nihal\");\r\n  };\r\n  saveAll = () => {\r\n    const { values } = this.state;\r\n    localStorage.setItem(\"Nihal\", values);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <form className=\"input-section\" onSubmit={this.storeItems}>\r\n          <h1>Todo App</h1>\r\n          <input\r\n            value={this.state.input}\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n            placeholder=\"Enter Items...\"\r\n          />\r\n        </form>\r\n        <ul>\r\n          {this.state.values.map((data, i) => {\r\n            return (\r\n              <li key={i}>\r\n                {data}\r\n\r\n                <Popup\r\n                  trigger={\r\n                    <i\r\n                      className=\"far fa-edit\"\r\n                      onClick={() => {\r\n                        this.editItems(i);\r\n                      }}\r\n                    ></i>\r\n                  }\r\n                  position=\"right center\"\r\n                >\r\n                  <div className=\"popup\" style={this.state.style}>\r\n                    <input\r\n                      value={this.state.storeItems}\r\n                      type=\"text\"\r\n                      onChange={this.editedText}\r\n                    />\r\n                    <button\r\n                      onClick={() => {\r\n                        this.addEditedText(i);\r\n                      }}\r\n                    >\r\n                      Add\r\n                    </button>\r\n                  </div>\r\n                </Popup>\r\n\r\n                <i\r\n                  className=\"fas fa-trash-alt\"\r\n                  onClick={() => {\r\n                    this.deleteItems(i);\r\n                  }}\r\n                ></i>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n        <button onClick={this.saveAll}>Save All</button>\r\n        <button onClick={this.deleteAll}>Delete All</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport Demo from \"./components/Demo\";\n\nfunction App() {\n  return <Demo />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}